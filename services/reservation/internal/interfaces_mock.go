// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package internal is a generated GoMock package.
package internal

import (
	reflect "reflect"
	models "reservation/models"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockResUsecase is a mock of ResUsecase interface.
type MockResUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockResUsecaseMockRecorder
}

// MockResUsecaseMockRecorder is the mock recorder for MockResUsecase.
type MockResUsecaseMockRecorder struct {
	mock *MockResUsecase
}

// NewMockResUsecase creates a new mock instance.
func NewMockResUsecase(ctrl *gomock.Controller) *MockResUsecase {
	mock := &MockResUsecase{ctrl: ctrl}
	mock.recorder = &MockResUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResUsecase) EXPECT() *MockResUsecaseMockRecorder {
	return m.recorder
}

// GetReservation mocks base method.
func (m *MockResUsecase) GetReservation(resUid uuid.UUID) (models.BookReservationResponse, models.StatusCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReservation", resUid)
	ret0, _ := ret[0].(models.BookReservationResponse)
	ret1, _ := ret[1].(models.StatusCode)
	return ret0, ret1
}

// GetReservation indicates an expected call of GetReservation.
func (mr *MockResUsecaseMockRecorder) GetReservation(resUid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReservation", reflect.TypeOf((*MockResUsecase)(nil).GetReservation), resUid)
}

// GetReservationsInfo mocks base method.
func (m *MockResUsecase) GetReservationsInfo(name string) ([]models.BookReservationResponse, models.StatusCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReservationsInfo", name)
	ret0, _ := ret[0].([]models.BookReservationResponse)
	ret1, _ := ret[1].(models.StatusCode)
	return ret0, ret1
}

// GetReservationsInfo indicates an expected call of GetReservationsInfo.
func (mr *MockResUsecaseMockRecorder) GetReservationsInfo(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReservationsInfo", reflect.TypeOf((*MockResUsecase)(nil).GetReservationsInfo), name)
}

// ReturnBook mocks base method.
func (m *MockResUsecase) ReturnBook(resUid uuid.UUID, userName string, req models.ReturnBookRequest) models.StatusCode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReturnBook", resUid, userName, req)
	ret0, _ := ret[0].(models.StatusCode)
	return ret0
}

// ReturnBook indicates an expected call of ReturnBook.
func (mr *MockResUsecaseMockRecorder) ReturnBook(resUid, userName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReturnBook", reflect.TypeOf((*MockResUsecase)(nil).ReturnBook), resUid, userName, req)
}

// TakeBook mocks base method.
func (m *MockResUsecase) TakeBook(name string, req models.TakeBookRequest) (models.TakeBookResponse, models.StatusCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TakeBook", name, req)
	ret0, _ := ret[0].(models.TakeBookResponse)
	ret1, _ := ret[1].(models.StatusCode)
	return ret0, ret1
}

// TakeBook indicates an expected call of TakeBook.
func (mr *MockResUsecaseMockRecorder) TakeBook(name, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TakeBook", reflect.TypeOf((*MockResUsecase)(nil).TakeBook), name, req)
}

// MockResRepo is a mock of ResRepo interface.
type MockResRepo struct {
	ctrl     *gomock.Controller
	recorder *MockResRepoMockRecorder
}

// MockResRepoMockRecorder is the mock recorder for MockResRepo.
type MockResRepoMockRecorder struct {
	mock *MockResRepo
}

// NewMockResRepo creates a new mock instance.
func NewMockResRepo(ctrl *gomock.Controller) *MockResRepo {
	mock := &MockResRepo{ctrl: ctrl}
	mock.recorder = &MockResRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResRepo) EXPECT() *MockResRepoMockRecorder {
	return m.recorder
}

// GetReservation mocks base method.
func (m *MockResRepo) GetReservation(resUid uuid.UUID) (models.BookReservationResponse, models.StatusCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReservation", resUid)
	ret0, _ := ret[0].(models.BookReservationResponse)
	ret1, _ := ret[1].(models.StatusCode)
	return ret0, ret1
}

// GetReservation indicates an expected call of GetReservation.
func (mr *MockResRepoMockRecorder) GetReservation(resUid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReservation", reflect.TypeOf((*MockResRepo)(nil).GetReservation), resUid)
}

// ReservationsInfo mocks base method.
func (m *MockResRepo) ReservationsInfo(name string) ([]models.BookReservationResponse, models.StatusCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReservationsInfo", name)
	ret0, _ := ret[0].([]models.BookReservationResponse)
	ret1, _ := ret[1].(models.StatusCode)
	return ret0, ret1
}

// ReservationsInfo indicates an expected call of ReservationsInfo.
func (mr *MockResRepoMockRecorder) ReservationsInfo(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReservationsInfo", reflect.TypeOf((*MockResRepo)(nil).ReservationsInfo), name)
}

// ReserveBook mocks base method.
func (m *MockResRepo) ReserveBook(name string, req models.TakeBookRequest) (models.TakeBookResponse, models.StatusCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReserveBook", name, req)
	ret0, _ := ret[0].(models.TakeBookResponse)
	ret1, _ := ret[1].(models.StatusCode)
	return ret0, ret1
}

// ReserveBook indicates an expected call of ReserveBook.
func (mr *MockResRepoMockRecorder) ReserveBook(name, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReserveBook", reflect.TypeOf((*MockResRepo)(nil).ReserveBook), name, req)
}

// ReturnBook mocks base method.
func (m *MockResRepo) ReturnBook(resUid uuid.UUID, userName string, req models.ReturnBookRequest) models.StatusCode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReturnBook", resUid, userName, req)
	ret0, _ := ret[0].(models.StatusCode)
	return ret0
}

// ReturnBook indicates an expected call of ReturnBook.
func (mr *MockResRepoMockRecorder) ReturnBook(resUid, userName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReturnBook", reflect.TypeOf((*MockResRepo)(nil).ReturnBook), resUid, userName, req)
}
