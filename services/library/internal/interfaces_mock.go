// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package internal is a generated GoMock package.
package internal

import (
	models "library/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockLibraryUsecase is a mock of LibraryUsecase interface.
type MockLibraryUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockLibraryUsecaseMockRecorder
}

// MockLibraryUsecaseMockRecorder is the mock recorder for MockLibraryUsecase.
type MockLibraryUsecaseMockRecorder struct {
	mock *MockLibraryUsecase
}

// NewMockLibraryUsecase creates a new mock instance.
func NewMockLibraryUsecase(ctrl *gomock.Controller) *MockLibraryUsecase {
	mock := &MockLibraryUsecase{ctrl: ctrl}
	mock.recorder = &MockLibraryUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLibraryUsecase) EXPECT() *MockLibraryUsecaseMockRecorder {
	return m.recorder
}

// GetBook mocks base method.
func (m *MockLibraryUsecase) GetBook(bookUid uuid.UUID) (models.BookInfo, models.StatusCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBook", bookUid)
	ret0, _ := ret[0].(models.BookInfo)
	ret1, _ := ret[1].(models.StatusCode)
	return ret0, ret1
}

// GetBook indicates an expected call of GetBook.
func (mr *MockLibraryUsecaseMockRecorder) GetBook(bookUid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBook", reflect.TypeOf((*MockLibraryUsecase)(nil).GetBook), bookUid)
}

// GetBooksList mocks base method.
func (m *MockLibraryUsecase) GetBooksList(page, size int64, showAll bool, libUid uuid.UUID) ([]models.LibraryBookPaginationResponse, models.StatusCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBooksList", page, size, showAll, libUid)
	ret0, _ := ret[0].([]models.LibraryBookPaginationResponse)
	ret1, _ := ret[1].(models.StatusCode)
	return ret0, ret1
}

// GetBooksList indicates an expected call of GetBooksList.
func (mr *MockLibraryUsecaseMockRecorder) GetBooksList(page, size, showAll, libUid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBooksList", reflect.TypeOf((*MockLibraryUsecase)(nil).GetBooksList), page, size, showAll, libUid)
}

// GetLib mocks base method.
func (m *MockLibraryUsecase) GetLib(libUid uuid.UUID) (models.LibraryResponse, models.StatusCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLib", libUid)
	ret0, _ := ret[0].(models.LibraryResponse)
	ret1, _ := ret[1].(models.StatusCode)
	return ret0, ret1
}

// GetLib indicates an expected call of GetLib.
func (mr *MockLibraryUsecaseMockRecorder) GetLib(libUid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLib", reflect.TypeOf((*MockLibraryUsecase)(nil).GetLib), libUid)
}

// GetLibrariesList mocks base method.
func (m *MockLibraryUsecase) GetLibrariesList(page, size int64, city string) ([]models.LibraryPaginationResponse, models.StatusCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLibrariesList", page, size, city)
	ret0, _ := ret[0].([]models.LibraryPaginationResponse)
	ret1, _ := ret[1].(models.StatusCode)
	return ret0, ret1
}

// GetLibrariesList indicates an expected call of GetLibrariesList.
func (mr *MockLibraryUsecaseMockRecorder) GetLibrariesList(page, size, city interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLibrariesList", reflect.TypeOf((*MockLibraryUsecase)(nil).GetLibrariesList), page, size, city)
}

// UpdateBookCount mocks base method.
func (m *MockLibraryUsecase) UpdateBookCount(bookUid uuid.UUID, num int) models.StatusCode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBookCount", bookUid, num)
	ret0, _ := ret[0].(models.StatusCode)
	return ret0
}

// UpdateBookCount indicates an expected call of UpdateBookCount.
func (mr *MockLibraryUsecaseMockRecorder) UpdateBookCount(bookUid, num interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBookCount", reflect.TypeOf((*MockLibraryUsecase)(nil).UpdateBookCount), bookUid, num)
}

// MockLibraryRepo is a mock of LibraryRepo interface.
type MockLibraryRepo struct {
	ctrl     *gomock.Controller
	recorder *MockLibraryRepoMockRecorder
}

// MockLibraryRepoMockRecorder is the mock recorder for MockLibraryRepo.
type MockLibraryRepoMockRecorder struct {
	mock *MockLibraryRepo
}

// NewMockLibraryRepo creates a new mock instance.
func NewMockLibraryRepo(ctrl *gomock.Controller) *MockLibraryRepo {
	mock := &MockLibraryRepo{ctrl: ctrl}
	mock.recorder = &MockLibraryRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLibraryRepo) EXPECT() *MockLibraryRepoMockRecorder {
	return m.recorder
}

// GetBook mocks base method.
func (m *MockLibraryRepo) GetBook(bookUid uuid.UUID) (models.BookInfo, models.StatusCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBook", bookUid)
	ret0, _ := ret[0].(models.BookInfo)
	ret1, _ := ret[1].(models.StatusCode)
	return ret0, ret1
}

// GetBook indicates an expected call of GetBook.
func (mr *MockLibraryRepoMockRecorder) GetBook(bookUid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBook", reflect.TypeOf((*MockLibraryRepo)(nil).GetBook), bookUid)
}

// GetBooks mocks base method.
func (m *MockLibraryRepo) GetBooks(page, size int64, showAll bool, LibUid uuid.UUID) ([]models.LibraryBookResponse, int64, models.StatusCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBooks", page, size, showAll, LibUid)
	ret0, _ := ret[0].([]models.LibraryBookResponse)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(models.StatusCode)
	return ret0, ret1, ret2
}

// GetBooks indicates an expected call of GetBooks.
func (mr *MockLibraryRepoMockRecorder) GetBooks(page, size, showAll, LibUid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBooks", reflect.TypeOf((*MockLibraryRepo)(nil).GetBooks), page, size, showAll, LibUid)
}

// GetLib mocks base method.
func (m *MockLibraryRepo) GetLib(libUid uuid.UUID) (models.LibraryResponse, models.StatusCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLib", libUid)
	ret0, _ := ret[0].(models.LibraryResponse)
	ret1, _ := ret[1].(models.StatusCode)
	return ret0, ret1
}

// GetLib indicates an expected call of GetLib.
func (mr *MockLibraryRepoMockRecorder) GetLib(libUid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLib", reflect.TypeOf((*MockLibraryRepo)(nil).GetLib), libUid)
}

// GetLibraries mocks base method.
func (m *MockLibraryRepo) GetLibraries(page, size int64, city string) ([]models.LibraryResponse, int64, models.StatusCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLibraries", page, size, city)
	ret0, _ := ret[0].([]models.LibraryResponse)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(models.StatusCode)
	return ret0, ret1, ret2
}

// GetLibraries indicates an expected call of GetLibraries.
func (mr *MockLibraryRepoMockRecorder) GetLibraries(page, size, city interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLibraries", reflect.TypeOf((*MockLibraryRepo)(nil).GetLibraries), page, size, city)
}

// UpdateBookCount mocks base method.
func (m *MockLibraryRepo) UpdateBookCount(bookUid uuid.UUID, num int) models.StatusCode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBookCount", bookUid, num)
	ret0, _ := ret[0].(models.StatusCode)
	return ret0
}

// UpdateBookCount indicates an expected call of UpdateBookCount.
func (mr *MockLibraryRepoMockRecorder) UpdateBookCount(bookUid, num interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBookCount", reflect.TypeOf((*MockLibraryRepo)(nil).UpdateBookCount), bookUid, num)
}
