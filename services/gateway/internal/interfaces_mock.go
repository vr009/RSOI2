// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package internal is a generated GoMock package.
package internal

import (
	models "gateway/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// GetBookList mocks base method.
func (m *MockUsecase) GetBookList(page, size int64, showAll bool, LibUid uuid.UUID) ([]models.LibraryBookPaginationResponse, models.StatusCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookList", page, size, showAll, LibUid)
	ret0, _ := ret[0].([]models.LibraryBookPaginationResponse)
	ret1, _ := ret[1].(models.StatusCode)
	return ret0, ret1
}

// GetBookList indicates an expected call of GetBookList.
func (mr *MockUsecaseMockRecorder) GetBookList(page, size, showAll, LibUid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookList", reflect.TypeOf((*MockUsecase)(nil).GetBookList), page, size, showAll, LibUid)
}

// GetLibList mocks base method.
func (m *MockUsecase) GetLibList(page, size int64, city string) ([]models.LibraryPaginationResponse, models.StatusCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLibList", page, size, city)
	ret0, _ := ret[0].([]models.LibraryPaginationResponse)
	ret1, _ := ret[1].(models.StatusCode)
	return ret0, ret1
}

// GetLibList indicates an expected call of GetLibList.
func (mr *MockUsecaseMockRecorder) GetLibList(page, size, city interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLibList", reflect.TypeOf((*MockUsecase)(nil).GetLibList), page, size, city)
}

// GetRating mocks base method.
func (m *MockUsecase) GetRating(name string) (models.UserRatingResponse, models.StatusCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRating", name)
	ret0, _ := ret[0].(models.UserRatingResponse)
	ret1, _ := ret[1].(models.StatusCode)
	return ret0, ret1
}

// GetRating indicates an expected call of GetRating.
func (mr *MockUsecaseMockRecorder) GetRating(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRating", reflect.TypeOf((*MockUsecase)(nil).GetRating), name)
}

// GetReservationInfo mocks base method.
func (m *MockUsecase) GetReservationInfo(name string) ([]models.BookReservationResponse, models.StatusCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReservationInfo", name)
	ret0, _ := ret[0].([]models.BookReservationResponse)
	ret1, _ := ret[1].(models.StatusCode)
	return ret0, ret1
}

// GetReservationInfo indicates an expected call of GetReservationInfo.
func (mr *MockUsecaseMockRecorder) GetReservationInfo(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReservationInfo", reflect.TypeOf((*MockUsecase)(nil).GetReservationInfo), name)
}

// ReturnBook mocks base method.
func (m *MockUsecase) ReturnBook(resUid uuid.UUID, name string, req models.ReturnBookRequest) models.StatusCode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReturnBook", resUid, name, req)
	ret0, _ := ret[0].(models.StatusCode)
	return ret0
}

// ReturnBook indicates an expected call of ReturnBook.
func (mr *MockUsecaseMockRecorder) ReturnBook(resUid, name, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReturnBook", reflect.TypeOf((*MockUsecase)(nil).ReturnBook), resUid, name, req)
}

// TakeBook mocks base method.
func (m *MockUsecase) TakeBook(name string, req models.TakeBookRequest) (models.TakeBookResponse, models.StatusCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TakeBook", name, req)
	ret0, _ := ret[0].(models.TakeBookResponse)
	ret1, _ := ret[1].(models.StatusCode)
	return ret0, ret1
}

// TakeBook indicates an expected call of TakeBook.
func (mr *MockUsecaseMockRecorder) TakeBook(name, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TakeBook", reflect.TypeOf((*MockUsecase)(nil).TakeBook), name, req)
}

// MockApiClient is a mock of ApiClient interface.
type MockApiClient struct {
	ctrl     *gomock.Controller
	recorder *MockApiClientMockRecorder
}

// MockApiClientMockRecorder is the mock recorder for MockApiClient.
type MockApiClientMockRecorder struct {
	mock *MockApiClient
}

// NewMockApiClient creates a new mock instance.
func NewMockApiClient(ctrl *gomock.Controller) *MockApiClient {
	mock := &MockApiClient{ctrl: ctrl}
	mock.recorder = &MockApiClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiClient) EXPECT() *MockApiClientMockRecorder {
	return m.recorder
}

// GetBook mocks base method.
func (m *MockApiClient) GetBook(bookId uuid.UUID) (models.BookInfo, models.StatusCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBook", bookId)
	ret0, _ := ret[0].(models.BookInfo)
	ret1, _ := ret[1].(models.StatusCode)
	return ret0, ret1
}

// GetBook indicates an expected call of GetBook.
func (mr *MockApiClientMockRecorder) GetBook(bookId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBook", reflect.TypeOf((*MockApiClient)(nil).GetBook), bookId)
}

// GetBooks mocks base method.
func (m *MockApiClient) GetBooks(page, size int64, showAll bool, LibUid uuid.UUID) ([]models.LibraryBookPaginationResponse, models.StatusCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBooks", page, size, showAll, LibUid)
	ret0, _ := ret[0].([]models.LibraryBookPaginationResponse)
	ret1, _ := ret[1].(models.StatusCode)
	return ret0, ret1
}

// GetBooks indicates an expected call of GetBooks.
func (mr *MockApiClientMockRecorder) GetBooks(page, size, showAll, LibUid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBooks", reflect.TypeOf((*MockApiClient)(nil).GetBooks), page, size, showAll, LibUid)
}

// GetLibraries mocks base method.
func (m *MockApiClient) GetLibraries(page, size int64, city string) ([]models.LibraryPaginationResponse, models.StatusCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLibraries", page, size, city)
	ret0, _ := ret[0].([]models.LibraryPaginationResponse)
	ret1, _ := ret[1].(models.StatusCode)
	return ret0, ret1
}

// GetLibraries indicates an expected call of GetLibraries.
func (mr *MockApiClientMockRecorder) GetLibraries(page, size, city interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLibraries", reflect.TypeOf((*MockApiClient)(nil).GetLibraries), page, size, city)
}

// GetLibrary mocks base method.
func (m *MockApiClient) GetLibrary(libId uuid.UUID) (models.LibraryResponse, models.StatusCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLibrary", libId)
	ret0, _ := ret[0].(models.LibraryResponse)
	ret1, _ := ret[1].(models.StatusCode)
	return ret0, ret1
}

// GetLibrary indicates an expected call of GetLibrary.
func (mr *MockApiClientMockRecorder) GetLibrary(libId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLibrary", reflect.TypeOf((*MockApiClient)(nil).GetLibrary), libId)
}

// GetRating mocks base method.
func (m *MockApiClient) GetRating(name string) (models.UserRatingResponse, models.StatusCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRating", name)
	ret0, _ := ret[0].(models.UserRatingResponse)
	ret1, _ := ret[1].(models.StatusCode)
	return ret0, ret1
}

// GetRating indicates an expected call of GetRating.
func (mr *MockApiClientMockRecorder) GetRating(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRating", reflect.TypeOf((*MockApiClient)(nil).GetRating), name)
}

// GetReservation mocks base method.
func (m *MockApiClient) GetReservation(resUid uuid.UUID) (models.BookReservationResponse, models.StatusCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReservation", resUid)
	ret0, _ := ret[0].(models.BookReservationResponse)
	ret1, _ := ret[1].(models.StatusCode)
	return ret0, ret1
}

// GetReservation indicates an expected call of GetReservation.
func (mr *MockApiClientMockRecorder) GetReservation(resUid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReservation", reflect.TypeOf((*MockApiClient)(nil).GetReservation), resUid)
}

// GetReservations mocks base method.
func (m *MockApiClient) GetReservations(name string) ([]models.BookReservationResponse, models.StatusCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReservations", name)
	ret0, _ := ret[0].([]models.BookReservationResponse)
	ret1, _ := ret[1].(models.StatusCode)
	return ret0, ret1
}

// GetReservations indicates an expected call of GetReservations.
func (mr *MockApiClientMockRecorder) GetReservations(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReservations", reflect.TypeOf((*MockApiClient)(nil).GetReservations), name)
}

// ReturnBook mocks base method.
func (m *MockApiClient) ReturnBook(resUid uuid.UUID, name string, req models.ReturnBookRequest) models.StatusCode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReturnBook", resUid, name, req)
	ret0, _ := ret[0].(models.StatusCode)
	return ret0
}

// ReturnBook indicates an expected call of ReturnBook.
func (mr *MockApiClientMockRecorder) ReturnBook(resUid, name, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReturnBook", reflect.TypeOf((*MockApiClient)(nil).ReturnBook), resUid, name, req)
}

// TakeBook mocks base method.
func (m *MockApiClient) TakeBook(name string, req models.TakeBookRequest) (models.TakeBookResponse, models.StatusCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TakeBook", name, req)
	ret0, _ := ret[0].(models.TakeBookResponse)
	ret1, _ := ret[1].(models.StatusCode)
	return ret0, ret1
}

// TakeBook indicates an expected call of TakeBook.
func (mr *MockApiClientMockRecorder) TakeBook(name, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TakeBook", reflect.TypeOf((*MockApiClient)(nil).TakeBook), name, req)
}

// UpdateBooksCount mocks base method.
func (m *MockApiClient) UpdateBooksCount(bookUid uuid.UUID, num int) models.StatusCode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBooksCount", bookUid, num)
	ret0, _ := ret[0].(models.StatusCode)
	return ret0
}

// UpdateBooksCount indicates an expected call of UpdateBooksCount.
func (mr *MockApiClientMockRecorder) UpdateBooksCount(bookUid, num interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBooksCount", reflect.TypeOf((*MockApiClient)(nil).UpdateBooksCount), bookUid, num)
}

// UpdateRating mocks base method.
func (m *MockApiClient) UpdateRating(name string, num int32) models.StatusCode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRating", name, num)
	ret0, _ := ret[0].(models.StatusCode)
	return ret0
}

// UpdateRating indicates an expected call of UpdateRating.
func (mr *MockApiClientMockRecorder) UpdateRating(name, num interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRating", reflect.TypeOf((*MockApiClient)(nil).UpdateRating), name, num)
}
