// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package reservation

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ReservationServiceClient is the client API for ReservationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReservationServiceClient interface {
	FetchReservations(ctx context.Context, in *ReservationFetchRequest, opts ...grpc.CallOption) (*ReservationFetchResponse, error)
	TakeBook(ctx context.Context, in *TakeBookRequest, opts ...grpc.CallOption) (*TakeBookResponse, error)
	ReturnBook(ctx context.Context, in *ReturnBookRequest, opts ...grpc.CallOption) (*ReturnBookResponse, error)
	GetReservation(ctx context.Context, in *GetReservationRequest, opts ...grpc.CallOption) (*ReservationFetchResponseItem, error)
}

type reservationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReservationServiceClient(cc grpc.ClientConnInterface) ReservationServiceClient {
	return &reservationServiceClient{cc}
}

func (c *reservationServiceClient) FetchReservations(ctx context.Context, in *ReservationFetchRequest, opts ...grpc.CallOption) (*ReservationFetchResponse, error) {
	out := new(ReservationFetchResponse)
	err := c.cc.Invoke(ctx, "/library.ReservationService/FetchReservations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationServiceClient) TakeBook(ctx context.Context, in *TakeBookRequest, opts ...grpc.CallOption) (*TakeBookResponse, error) {
	out := new(TakeBookResponse)
	err := c.cc.Invoke(ctx, "/library.ReservationService/TakeBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationServiceClient) ReturnBook(ctx context.Context, in *ReturnBookRequest, opts ...grpc.CallOption) (*ReturnBookResponse, error) {
	out := new(ReturnBookResponse)
	err := c.cc.Invoke(ctx, "/library.ReservationService/ReturnBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationServiceClient) GetReservation(ctx context.Context, in *GetReservationRequest, opts ...grpc.CallOption) (*ReservationFetchResponseItem, error) {
	out := new(ReservationFetchResponseItem)
	err := c.cc.Invoke(ctx, "/library.ReservationService/GetReservation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReservationServiceServer is the server API for ReservationService service.
// All implementations should embed UnimplementedReservationServiceServer
// for forward compatibility
type ReservationServiceServer interface {
	FetchReservations(context.Context, *ReservationFetchRequest) (*ReservationFetchResponse, error)
	TakeBook(context.Context, *TakeBookRequest) (*TakeBookResponse, error)
	ReturnBook(context.Context, *ReturnBookRequest) (*ReturnBookResponse, error)
	GetReservation(context.Context, *GetReservationRequest) (*ReservationFetchResponseItem, error)
}

// UnimplementedReservationServiceServer should be embedded to have forward compatible implementations.
type UnimplementedReservationServiceServer struct {
}

func (UnimplementedReservationServiceServer) FetchReservations(context.Context, *ReservationFetchRequest) (*ReservationFetchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchReservations not implemented")
}
func (UnimplementedReservationServiceServer) TakeBook(context.Context, *TakeBookRequest) (*TakeBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TakeBook not implemented")
}
func (UnimplementedReservationServiceServer) ReturnBook(context.Context, *ReturnBookRequest) (*ReturnBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReturnBook not implemented")
}
func (UnimplementedReservationServiceServer) GetReservation(context.Context, *GetReservationRequest) (*ReservationFetchResponseItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReservation not implemented")
}

// UnsafeReservationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReservationServiceServer will
// result in compilation errors.
type UnsafeReservationServiceServer interface {
	mustEmbedUnimplementedReservationServiceServer()
}

func RegisterReservationServiceServer(s grpc.ServiceRegistrar, srv ReservationServiceServer) {
	s.RegisterService(&ReservationService_ServiceDesc, srv)
}

func _ReservationService_FetchReservations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReservationFetchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationServiceServer).FetchReservations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/library.ReservationService/FetchReservations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationServiceServer).FetchReservations(ctx, req.(*ReservationFetchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReservationService_TakeBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TakeBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationServiceServer).TakeBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/library.ReservationService/TakeBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationServiceServer).TakeBook(ctx, req.(*TakeBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReservationService_ReturnBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReturnBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationServiceServer).ReturnBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/library.ReservationService/ReturnBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationServiceServer).ReturnBook(ctx, req.(*ReturnBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReservationService_GetReservation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReservationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationServiceServer).GetReservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/library.ReservationService/GetReservation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationServiceServer).GetReservation(ctx, req.(*GetReservationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReservationService_ServiceDesc is the grpc.ServiceDesc for ReservationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReservationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "library.ReservationService",
	HandlerType: (*ReservationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchReservations",
			Handler:    _ReservationService_FetchReservations_Handler,
		},
		{
			MethodName: "TakeBook",
			Handler:    _ReservationService_TakeBook_Handler,
		},
		{
			MethodName: "ReturnBook",
			Handler:    _ReservationService_ReturnBook_Handler,
		},
		{
			MethodName: "GetReservation",
			Handler:    _ReservationService_GetReservation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reservation/reservation.proto",
}
