// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package internal is a generated GoMock package.
package internal

import (
	models "rating/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRatingUsecase is a mock of RatingUsecase interface.
type MockRatingUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockRatingUsecaseMockRecorder
}

// MockRatingUsecaseMockRecorder is the mock recorder for MockRatingUsecase.
type MockRatingUsecaseMockRecorder struct {
	mock *MockRatingUsecase
}

// NewMockRatingUsecase creates a new mock instance.
func NewMockRatingUsecase(ctrl *gomock.Controller) *MockRatingUsecase {
	mock := &MockRatingUsecase{ctrl: ctrl}
	mock.recorder = &MockRatingUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRatingUsecase) EXPECT() *MockRatingUsecaseMockRecorder {
	return m.recorder
}

// GetRating mocks base method.
func (m *MockRatingUsecase) GetRating(name string) (models.UserRatingResponse, models.StatusCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRating", name)
	ret0, _ := ret[0].(models.UserRatingResponse)
	ret1, _ := ret[1].(models.StatusCode)
	return ret0, ret1
}

// GetRating indicates an expected call of GetRating.
func (mr *MockRatingUsecaseMockRecorder) GetRating(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRating", reflect.TypeOf((*MockRatingUsecase)(nil).GetRating), name)
}

// UpdateRating mocks base method.
func (m *MockRatingUsecase) UpdateRating(name string, updateNumber int32) models.StatusCode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRating", name, updateNumber)
	ret0, _ := ret[0].(models.StatusCode)
	return ret0
}

// UpdateRating indicates an expected call of UpdateRating.
func (mr *MockRatingUsecaseMockRecorder) UpdateRating(name, updateNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRating", reflect.TypeOf((*MockRatingUsecase)(nil).UpdateRating), name, updateNumber)
}

// MockRatingRepo is a mock of RatingRepo interface.
type MockRatingRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRatingRepoMockRecorder
}

// MockRatingRepoMockRecorder is the mock recorder for MockRatingRepo.
type MockRatingRepoMockRecorder struct {
	mock *MockRatingRepo
}

// NewMockRatingRepo creates a new mock instance.
func NewMockRatingRepo(ctrl *gomock.Controller) *MockRatingRepo {
	mock := &MockRatingRepo{ctrl: ctrl}
	mock.recorder = &MockRatingRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRatingRepo) EXPECT() *MockRatingRepoMockRecorder {
	return m.recorder
}

// FetchRating mocks base method.
func (m *MockRatingRepo) FetchRating(name string) (models.UserRatingResponse, models.StatusCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchRating", name)
	ret0, _ := ret[0].(models.UserRatingResponse)
	ret1, _ := ret[1].(models.StatusCode)
	return ret0, ret1
}

// FetchRating indicates an expected call of FetchRating.
func (mr *MockRatingRepoMockRecorder) FetchRating(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchRating", reflect.TypeOf((*MockRatingRepo)(nil).FetchRating), name)
}

// UpdateRating mocks base method.
func (m *MockRatingRepo) UpdateRating(name string, updateNumber int32) models.StatusCode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRating", name, updateNumber)
	ret0, _ := ret[0].(models.StatusCode)
	return ret0
}

// UpdateRating indicates an expected call of UpdateRating.
func (mr *MockRatingRepoMockRecorder) UpdateRating(name, updateNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRating", reflect.TypeOf((*MockRatingRepo)(nil).UpdateRating), name, updateNumber)
}
